# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
#- master
- feature/*

#pr:
#- master

pool:
  vmImage: 'ubuntu-latest'

variables:  
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  PLUGIN_DIR: '$(GOBIN)'
  modulePath: '$(GOPATH)/src/hello' # Path to the module's code

steps:
- script: |
    echo "GOBIN $(GOBIN)"
    echo "GOPATH $(GOPATH)"
    echo "REPO PATH $(GOPATH)/src/github.com/$(build.repository.name)"

    mkdir -p "$(GOPATH)"
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    echo "Moving $(system.defaultWorkingDirectory)/* To $(modulePath)"
    mv $(system.defaultWorkingDirectory)/* $(modulePath)
    shopt -s extglob
    shopt -s dotglob
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    else
      echo "ERROR no Gopkg.toml found!"
      exit 1
    fi
    go install hello/src/hello
  workingDirectory: '$(GOPATH)/src/hello'
  displayName: 'Get dependencies, then build'

- script: |
    $(GOBIN)/hello &
    PS=`ps -ef |grep hello |grep -v grep |awk '{print $2}'`
    echo "hello $PS"
    curl http://localhost:8000/status
    kill -9 $PS
  
